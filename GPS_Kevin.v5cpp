{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nrotation Rotation4 = rotation(PORT4, false);\n\ngps GPS8 = gps(PORT8, 0.00, -240.00, mm, 180);\ndistance DistanceLeft = distance(PORT12);\ndistance DistanceRight = distance(PORT20);\nbumper BumperA = bumper(Brain.ThreeWirePort.A);\nmotor leftMotorA = motor(PORT10, ratio18_1, false);\nmotor leftMotorB = motor(PORT2, ratio18_1, false);\nmotor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);\nmotor rightMotorA = motor(PORT3, ratio18_1, true);\nmotor rightMotorB = motor(PORT9, ratio18_1, true);\nmotor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);\ninertial DrivetrainInertial = inertial(PORT1);\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, DrivetrainInertial, 319.19, 320, 40, mm, 1);\n\ncontroller Controller1 = controller(primary);\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  int systemTime = Brain.Timer.systemHighResolution();\n  double batteryCurrent = Brain.Battery.current();\n  double batteryVoltage = Brain.Battery.voltage(voltageUnits::mV);\n\n  // Combine these values into a single integer\n  int seed = int(batteryVoltage + batteryCurrent * 100) + systemTime;\n\n  // Set the seed\n  srand(seed);\n}\n\nbool vexcode_initial_drivetrain_calibration_completed = false;\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Inertial\");\n  DrivetrainInertial.calibrate();\n  while (DrivetrainInertial.isCalibrating()) {\n    wait(25, msec);\n  }\n  vexcode_initial_drivetrain_calibration_completed = true;\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n\nvoid vexcodeInit() {\n\n  // Calibrate the Drivetrain\n  calibrateDrivetrain();\n\n  //Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool DrivetrainLNeedsToBeStopped_Controller1 = true;\nbool DrivetrainRNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // stop the motors if the brain is calibrating\n      if (DrivetrainInertial.isCalibrating()) {\n        LeftDriveSmart.stop();\n        RightDriveSmart.stop();\n        while (DrivetrainInertial.isCalibrating()) {\n          wait(25, msec);\n        }\n      }\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis2 + Axis4\n      // right = Axis2 - Axis4\n      int drivetrainLeftSideSpeed = Controller1.Axis2.position() + Controller1.Axis4.position();\n      int drivetrainRightSideSpeed = Controller1.Axis2.position() - Controller1.Axis4.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller1) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller1 = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller1) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller1 = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n// ------------------------------------------------------------------------------------------------\n//                                                                            \n// \tProject:            Drive to Location (Using Tangents)\n//\tDescription:        This example will show how to use a GPS Sensor to navigate a V5 Moby Hero Bot\n//                      to the center of the field by using a tangent calculation\n//                      to determine the heading to drive towards\n//  Starting Position:  Any\n//  Configuration:      V5 Hero Bot (Drivetrain 2-motor, Inertial)\n//                      Motor Group on Port 2 and 9\n//                      Rotation on Port 4\n//                      GPS on Port 8\n//                      Distance on Port 12\n//                      Optical on Port 19\n//                      Distance on Port 20\n//                      Bumper on 3-Wire Port A  \n//                                                                            \n// ------------------------------------------------------------------------------------------------\n\n//vex::motor      FrontRight(vex::PORT3, vex::gearSetting::ratio6_1, false);\n//vex::motor      FrontLeft(vex::PORT10, vex::gearSetting::ratio6_1, true);\n//vex::motor      BackRight(vex::PORT9, vex::gearSetting::ratio6_1, false);\n//vex::motor      BackLeft(vex::PORT2, vex::gearSetting::ratio6_1, true);\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nvoid printPosition() {\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1,1);\n    // Print GPS position values to the V5 Brain\n  Brain.Screen.print(\"X: %.2f\", GPS8.xPosition(mm));\n  Brain.Screen.print(\"  Y: %.2f\", GPS8.yPosition(mm));\n  Brain.Screen.newLine();\n  Controller1.Screen.clearScreen();\n  Controller1.Screen.print(\"X: %.2f\", GPS8.xPosition(mm));\n  Controller1.Screen.print(\"  Y: %.2f\", GPS8.yPosition(mm));\n  Controller1.Screen.newLine();\n\n  wait(1,seconds);\n}\n\nint main() {\n  // Initializing Robot Configuration. DO NOT REMOVE!\n  vexcodeInit();\n  // Calibrate the GPS before starting\n  GPS8.calibrate();\n  while (GPS8.isCalibrating()) { task::sleep(50); }\n\n  // Orient the drivetrain's heading with the GPS heading\n  Drivetrain.setHeading(GPS8.heading(), degrees);\n  Drivetrain.setTurnVelocity(25, percent);\n\n  // Print the starting position of the robot\n  while(true){\n    printPosition();\n  }\n\n  // Store the current position of the robot\n  float startingX = GPS8.xPosition(mm);\n  float startingY = GPS8.yPosition(mm);\n\n  // Store the target ending position of the robot\n  float endingX = 0;\n  float endingY = 0;\n\n  // Implement atan2 to calculate the heading that the robot needs to\n  // turn to in order to drive towards the ending position\n  float turnAngle = atan((endingX - startingX) / (endingY - startingY)) * 180 / M_PI;\n  if (endingY - startingY < 0) {\n    turnAngle = turnAngle + 180;\n  }\n\n  // Turn the robot to face the ending position\n  //Drivetrain.turnToHeading(turnAngle, degrees, true);\n\n  // Calculate the drive distance needed, then drive towards the target position\n  float driveDistance = sqrt(((endingX - startingX) * (endingX - startingX)) + ((endingY - startingY) * (endingY - startingY)));\n\n  //Drivetrain.driveFor(forward, driveDistance, mm, true);\n  \n  // Print the ending position of the robot\n  printPosition();\n}","textLanguage":"cpp","robotConfig":[{"port":[4],"name":"Rotation4","customName":false,"deviceType":"Rotation","deviceClass":"rotation","setting":{"reversed":"false"},"triportSourcePort":22},{"port":[8],"name":"GPS8","customName":false,"deviceType":"GPS","deviceClass":"gps","setting":{"xOffset":"0","xOffsetUnit":"mm","yOffset":"-240","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":22},{"port":[12],"name":"DistanceLeft","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22},{"port":[20],"name":"DistanceRight","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22},{"port":[1],"name":"BumperA","customName":false,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[10,2,3,9,1],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"}},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"splitRight","id":"primary"}}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.3","minVersion":"3.1.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}