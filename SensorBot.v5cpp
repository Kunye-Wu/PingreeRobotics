{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor LeftDriveSmart = motor(PORT2, ratio18_1, false);\nmotor RightDriveSmart = motor(PORT1, ratio18_1, true);\ninertial DrivetrainInertial = inertial(PORT14);\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, DrivetrainInertial, 319.19, 320, 40, mm, 1);\n\ngps GPS12 = gps(PORT12, 65.00, 85.00, mm, 90);\ngps GPS14 = gps(PORT19, 0.00, 90.00, mm, 0);\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  int systemTime = Brain.Timer.systemHighResolution();\n  double batteryCurrent = Brain.Battery.current();\n  double batteryVoltage = Brain.Battery.voltage(voltageUnits::mV);\n\n  // Combine these values into a single integer\n  int seed = int(batteryVoltage + batteryCurrent * 100) + systemTime;\n\n  // Set the seed\n  srand(seed);\n}\n\nbool vexcode_initial_drivetrain_calibration_completed = false;\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Inertial\");\n  DrivetrainInertial.calibrate();\n  while (DrivetrainInertial.isCalibrating()) {\n    wait(25, msec);\n  }\n  vexcode_initial_drivetrain_calibration_completed = true;\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n\nvoid vexcodeInit() {\n\n  // Calibrate the Drivetrain\n  calibrateDrivetrain();\n\n  //Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n// ----------------------------------------------------------------------------\n//                                                                            \n//    Project:  This part is irrelevant unless you want to                                             \n//    Author:   I'm going to take credit for my awesome comments - Aidan Mack B)\n//    Created:  10/13/2023, long time ago (maybe?)\n//    Configuration: Idk what this is for   \n//                                                                            \n// ----------------------------------------------------------------------------\n\n// Include the V5 Library\n#include \"vex.h\"\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n// Put your variables and functions here!\n\nvex::motor      FrontRight(vex::PORT1, vex::gearSetting::ratio18_1, true);\nvex::motor      FrontLeft(vex::PORT2, vex::gearSetting::ratio18_1, false);\n\nvex::controller controller1(vex::controllerType::primary);\n\nint rightTurn = controller1.Axis3.position(pct) - controller1.Axis4.position(pct);\nint leftTurn = controller1.Axis3.position(pct) + controller1.Axis4.position(pct);\nint referenceAngle;\ndouble PositionX1;\ndouble PositionY1;\ndouble PositionX2;\ndouble avrPositionY;\ndouble PositionX2;\ndouble avrPositionY;\ndouble avrPositionX;\ndouble avrPositionY;\n\nvoid driveToPositionX(double x) {\n  avrPositionX = (GPS12.xPosition(mm) + GPS14.xPosition(mm))/2;\n  if (avrPositionX < x) {\n    referenceAngle = 90;\n  }\n  else {\n    referenceAngle = 270;\n  }\n  if (referenceAngle - DrivetrainInertial.heading(degrees) <= 180){\n    Drivetrain.turnFor(right, (referenceAngle - DrivetrainInertial.heading(degrees)), degrees, true);\n  } else {\n    Drivetrain.turnFor(left, (90 - DrivetrainInertial.heading(degrees)), degrees, true);\n  }\n//  Drivetrain.drive(forward);\n\n  while (!(avrPositionX - x > -20 && avrPositionX - x < 20)) {\n    Brain.Screen.setCursor(1, 1);\n    avrPositionX = (GPS12.xPosition(mm) + GPS14.xPosition(mm))/2;\n    avrPositionY = (GPS12.yPosition(mm) + GPS14.yPosition(mm))/2;\n    Brain.Screen.print(avrPositionX);\n    Brain.Screen.print(\"  \");\n    Brain.Screen.print(avrPositionY);\n    Brain.Screen.print(\"  \");\n    Brain.Screen.print(DrivetrainInertial.heading(degrees));\n    controller1.Screen.print(avrPositionX);\n    controller1.Screen.print(\"  \");\n    controller1.Screen.print(avrPositionY);\n    controller1.Screen.print(\"  \");\n    controller1.Screen.print(DrivetrainInertial.heading(degrees));\n    wait(0.1, seconds);\n    Brain.Screen.clearScreen();\n    controller1.Screen.clearScreen();\n  }\n\n  Drivetrain.stop();\n}\n\nvoid driveToPositionY(double y) {\n  avrPositionY = (GPS12.yPosition(mm) + GPS14.yPosition(mm))/2;\n  if (avrPositionY < y) {\n    referenceAngle = 0;\n  }\n  else {\n    referenceAngle = 180;\n  }\n  if (referenceAngle - DrivetrainInertial.heading(degrees) <= 180){\n    Drivetrain.turnFor(right, (referenceAngle - DrivetrainInertial.heading(degrees)), degrees, true);\n  } else {\n    Drivetrain.turnFor(left, (referenceAngle - DrivetrainInertial.heading(degrees)), degrees, true);\n  }\n  Drivetrain.drive(forward);\n\n  while (!(avrPositionY - y > -20 && avrPositionY - y < 20)) {\n    avrPositionY = (GPS12.yPosition(mm) + GPS14.yPosition(mm))/2;\n    wait(0.1, seconds);\n  }\n\n  Drivetrain.stop();\n}\n\n// Begin project code\n\nvoid preAutonomous(void) {\n\n  // actions to do when the program starts\n  // like gyro calibration and stuff\n  FrontRight.stop(hold);\n  FrontLeft.stop(hold);\n  Drivetrain.setTurnVelocity(70, pct);\n  Drivetrain.setDriveVelocity(20, pct);\n\n  GPS12.calibrate();\n  GPS14.calibrate();\n  DrivetrainInertial.calibrate();\n  wait(3,seconds);\n\n  Brain.Screen.clearScreen();\n  Brain.Screen.print(\"pre auton code\");\n  wait(1, seconds);\n}\n\nvoid autonomous(void) {\n  Brain.Screen.clearScreen();\n  Brain.Screen.print(\"autonomous code\");\n\n  // place automonous code here\n  Drivetrain.setTurnVelocity(60, pct);\n  Drivetrain.setDriveVelocity(30, pct);\n  // driveToPositionX(-400);\n  // driveToPositionY(-400);\n\n}\n\nvoid userControl(void) {\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1,1);\n  // place driver control in this while loop\n  // this is where your main code goes, your old main goes inside of here.\n  driveToPositionX(-400);\n  driveToPositionY(-400);\n  while (true)\n  {\n    Brain.Screen.setCursor(1,1);\n    Brain.Screen.print(DrivetrainInertial.angle(degrees));\n    Brain.Screen.print(\"  \");\n    Brain.Screen.print(DrivetrainInertial.roll(degrees));\n    Brain.Screen.print(\"  \");\n    Brain.Screen.print(DrivetrainInertial.pitch(degrees));\n    wait(0.1, seconds);\n    Brain.Screen.clearScreen();\n    // rightTurn = controller1.Axis3.position(pct) - controller1.Axis4.position(pct);\n    // leftTurn = controller1.Axis3.position(pct) + controller1.Axis4.position(pct);\n    // if (rightTurn < 0){\n    //   rightTurn = rightTurn/2;\n    // }\n    // if (leftTurn < 0){\n    //   leftTurn = leftTurn/2;\n    // }\n    // FrontRight.spin(forward, rightTurn, pct);\n    // FrontLeft.spin(forward, leftTurn, pct);\n\n  }\n\n}\n\n\nint main() {\n\n  // DONT MESS WITH THIS PART (unless you know what you're doing)\n\n  // create competition instance\n  competition Competition;\n\n  // Set up callbacks for autonomous and driver control periods.\n  Competition.autonomous(autonomous);\n  Competition.drivercontrol(userControl);\n\n  // Run the pre-autonomous function.\n  preAutonomous();\n\n\n  // Prevent main from exiting with an infinite loop.\n  while (true)\n  {\n    wait(100, msec);\n  }\n}\n\n// That's all folks!","textLanguage":"cpp","robotConfig":[{"port":[2,1,13],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[12],"name":"GPS12","customName":false,"deviceType":"GPS","deviceClass":"gps","setting":{"xOffset":"65","xOffsetUnit":"mm","yOffset":"85","yOffsetUnit":"mm","thetaOffset":"90"},"triportSourcePort":22},{"port":[14],"name":"GPS14","customName":false,"deviceType":"GPS","deviceClass":"gps","setting":{"xOffset":"0","xOffsetUnit":"mm","yOffset":"90","yOffsetUnit":"mm","thetaOffset":"0"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.3","minVersion":"3.1.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}